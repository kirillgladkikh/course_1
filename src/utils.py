from datetime import datetime

# Чтение из XLS-файла в JSON



# Утилиты для модуля views.py


def parse_datetime(date_str):
    """Парсинг входной даты в формате YYYY-MM-DD HH:MM:SS"""
    return datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")


def calculate_period(date):
    """Определение временного периода (начало месяца — текущая дата)"""
    start_of_month = date.replace(day=1)
    return (date - start_of_month).days


def get_greeting(date):
    """Определение приветствия по времени суток"""
    hour = date.hour
    if 5 <= hour < 12:
        return "Доброе утро"
    elif 12 <= hour < 18:
        return "Добрый день"
    elif 18 <= hour < 23:
        return "Добрый вечер"
    else:
        return "Доброй ночи"


# Функции для utils.py
# Основные категории функций
# Utils.py — это файл для хранения вспомогательных функций, которые можно повторно использовать в проекте.
# Вот основные категории функций, которые стоит включить:
#
# 1. Работа с данными
# Загрузка данных:
#
# load_data() — загрузка данных из файлов или баз данных
#
# read_csv() — чтение CSV-файлов
#
# read_json() — чтение JSON-файлов
#
# read_excel() — чтение Excel-файлов
#
# Парсинг данных:
#
# parse_data() — преобразование данных в стандартный формат
#
# extract_values() — извлечение определенных значений
#
# clean_data() — очистка данных от мусора
#
# 2. Валидация
# Проверка данных:
#
# validate_input() — валидация пользовательского ввода
#
# check_data_type() — проверка типов данных
#
# validate_format() — проверка формата данных
#
# check_constraints() — проверка на соответствие ограничениям
#
# 3. Математические операции
# Статистические функции:
#
# calculate_mean() — вычисление среднего значения
#
# calculate_median() — вычисление медианы
#
# calculate_mode() — вычисление моды
#
# calculate_std() — вычисление стандартного отклонения
#
# 4. Утилиты для работы с файлами
# Операции с файлами:
#
# save_to_file() — сохранение данных в файл
#
# delete_file() — удаление файла
#
# check_file_exists() — проверка существования файла
#
# get_file_size() — получение размера файла
#
# 5. Строковые операции
# Обработка строк:
#
# format_string() — форматирование строк
#
# clean_string() — очистка строк от лишних символов
#
# convert_case() — преобразование регистра
#
# truncate_string() — обрезка строк
#
# 6. Сетевые функции
# Работа с сетью:
#
# make_request() — выполнение HTTP-запросов
#
# check_connection() — проверка сетевого подключения
#
# download_file() — загрузка файлов
#
# upload_file() — загрузка файлов на сервер
#
# Рекомендации по организации
# Используйте понятные и описательные имена функций
#
# Добавляйте докстринги к каждой функции
#
# Обрабатывайте исключения внутри функций
#
# Группируйте функции по категориям
#
# Добавляйте комментарии к сложным функциям
#
# Пример структуры файла


# def load_data(file_path):
#     """Загрузка данных из файла"""
#     try:
#         # код загрузки
#         pass
#     except Exception as e:
#         print(f"Ошибка: {e}")
#         return None
#
# def validate_input(data):
#     """Валидация входных данных"""
#     # код валидации
#     return True
#
# def calculate_mean(values):
#     """Вычисление среднего значения"""
#     try:
#         return sum(values) / len(values)
#     except Exception as e:
#         print(f"Ошибка: {e}")
#         return None
# Такой подход к организации utils.py поможет сделать ваш код более структурированным, поддерживаемым и масштабируемым.
